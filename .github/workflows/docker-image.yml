name: Deployment

on:
  push:
    branches: [ 'master' ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2

      - name: Test
        run: cargo test --release --no-fail-fast
      - name: Build
        run: cargo build --release

  publish:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    concurrency:
      group: production
      cancel-in-progress: true

    outputs:
      tag: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@main


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha,priority=650
            type=ref,event=branch
          flavor: |
            latest=auto

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking database.  If you would like to publish
      # transparency database even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${TAGS}

  deploy:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Get Deployment API Token
        id: token
        uses: fjogeleit/http-request-action@main
        with:
          url: ${{secrets.DEPLOY_AUTH_URL}}
          method: 'POST'
          timeout: 600000
          data: >-
            {
              "grant_type":"password",
              "prompt":"none", 
              "client_id": "kube-environment",
              "scope": "openid",
              "username": "${{secrets.DEPLOY_USERNAME}}",
              "password": "${{secrets.DEPLOY_PASSWORD}}"
            }
          contentType: "application/x-www-form-urlencoded"

      - name: Update
        id: refresh
        uses: fjogeleit/http-request-action@main
        with:
          url: "${{secrets.DEPLOY_URL}}?image=${{needs.publish.outputs.tag}}"
          method: 'PATCH'
          timeout: 600000
          bearerToken: ${{ fromJson(steps.token.outputs.response).access_token }}
